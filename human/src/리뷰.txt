
    1. 자바 시작하기
      - 프로그래밍 언어?
  
      -  JDK  (Java Development Kit)
         : 자바 프로그램을 개발하는 환경
          * JDK 는 JRE 를 포함하고 있다
      
     -  JRE (Java Runtime Environment)
         : 자바 프로그램을 실행하는 환경


     - JDK 설치
         * 시스템 환경 변수 
            Path : 시스템 전체에서 사용할 명령프로그램의 경로를 지정하는 변수


     - 통합 개발 환경 (IDE)
        : 컴파일, 디버깅, 실행 하는 프로그램 개발의 일련의 작업을 지원해주는 환경 

     - 이클립스 설치, InteliJ, VS CODE 


     - 기본 코드 용어
      *  package 패키지명;	:     소스 파일의 위치를 명시하는 키워드
      *  public class 클래스명 {   }	:     클래스 블록을 정의
			       * 클래스명 = 파일명 
			       * public class Hello {  }
			       * Hello.java

     * public static void main(String[] args) {    }     : 메소드 블록을 정의
				               * main() 메소드는 프로그램 시작점

     *    주석   :  실행과 상관없이 코드에 대한 설명을 작성한 부분
          -  한 줄 주석    	:    //
          -  여러 줄 주석 	:   /*       */
          -  문서 주석 	:   /**     */


    *  실행문
        -  int a = 10;         			: 변수 선언 실행문
        - System.out.println();		: 메소드 호출 실행문
           클래스명.객체변수.메소드명();
        : 실행문 끝에는  세미콜론(;) 을 반드시 붙여야한다.


         인스턴스 변수나 메소드로 정의    :   클래스명 객체명 = new 클래스명();   // 객체 생성
			       객체명.메소드명(); 		        // 메소드 호출

         static 변수나 메소드로정의	  :     클래스명.메소드명();	         // 객체 생성 없이 바로 메소드 호출


   2. 변수와 타입

       -  변수 선언
              자료형 변수명;		// 변수명은 관례적으로 카멜 케이스
           ex)   int simpleValue;

       - 변수 선언 및 초기화
              자료형 변수명 = 값;


      - 기본타입 (자료형)
         8개
         char byte short int long float double boolean


      - 타입 변환
          * 자동 형 변환
            : 작은 타입을 큰 타입에 대입할 때, 큰 타입으로 자동으로 변환되는 것
                int a = 10;
                double b = a;

          * 강제 형 변환
            : 큰 타입을 작은 타입에 대입할 때, 변환할 타입을 명시해서 변환하는 것
               double a = 12.34;
               int b = (int) a;

  3. 연산자
       - 분류 : 단항/이항/삼항

          단항 : +, -, ~
          이항 : +, -, *, /, = ....
          삼항 : 조건식 ? 참 값 : 거짓 값;

       - 산술 연산자 : + - * / %
       - 대입 연산자 : =
       * 복합 대입 연산자 : +=, -=, *=, /=, %=
 
       - 비교 연산자 : >, <, >=, <=, ==, !=
       - 논리 연산자 : AND - &&, OR - ||, NOT - !
       - 비트 연산자 : >>, >>>, <<, <<<, &, |
       - 조건 연산자 : 조건식 ? 참 값 : 거짓 값;


  4. 제어문 (조건문과 반복문)

      - 조건문         	*  if,  if~else, if~else if~else
	        	*  switch

      - 반복문         	* for
	        	* foreach
	        	* while
  	        	* do ~ while

     - 기타 제어문	* break
		* continue


  5. 참조 타입

        데이터 타입    - 기본 타입         * 정수 타입    byte short int long
			* 실수 타입   float double
			* 논리 타입   boolean

	            - 참조 타입 	* 배열 타입
			* 열거 타입
			* 클래스
			* 인터페이스


   6. 클래스
       : 객체를 정의하는 설계도
         - 멤버 : 변수, 메소드
         - 생성자 : 객체가 생성될 때, 실행되는 메소드
                          * 객체의 멤버를 초기화하는 역할
  	     
 	     * this	   : 객체 자기 자신을 가리키는 레퍼런스 
	     * this( )    : 생성자 내에서 다른 생성자를 호출하는 메소드
	     * super    : 부모 객체를 가리키는 레퍼런스
	     * super() : 자식 생성자에서 부모 생성자를 호출하는 메소드

        - 다형성
           * 메소드 오버로딩
	: 메소드 중복 정의
	- 같은 클래스 내에서 매개변수의 타입/개수/순서를 다르게 하여 중복 정의하는 것

           * 메소드 오버라이딩
	: 메소드 재정의
 	- 부모 클래스에 정의된 메소드를 자식 클래스에서 다시 정의하는 것
	* 자식 객체 생성 시, 동적할당으로 인해 부모 클래스의 메소드를 무시하고
	  자식 클래스의 메소드를 우선하여 실행한다.

           * 추상 클래스
	: 클래스들의 공통된 특성을 추출하여 선언한 클래스

	
           * 인터페이스
	: 상수와 추상메소드를 중점으로 정의한 구조

        - 메소드 
              * 정의 : 접근지정자 (static) 반환타입 메소드명( 매개변수1, 매개변수2 ) {    }
              * 호출 : 메소드명( 인자1, 인자2 );
                - 반환타입 : 기본타입, 참조타입      :  반환할 값을 반드시 return 키워드에 명시해주어야한다.
	                * void : 반환할 값이 없음을 의미한다. 
		         - return 를 쓰지 않아도 된다.
  	
        
       - 접근 지정자
          : 외부에서 해당 클래스/메소드/변수에 접근할 수 있는 범위를 지정하는 키워드

          * 종류 :  public > protected >  default >  private
	- public  	     : 전체에서 접근 가능
	- protected   : 같은 패키지 + 상속 받은 다른 패키지의 클래스 에서 접근 가능
	- default	      : 같은 패키지 안에서 접근 가능
 	- private	      : 클래스 내에서만 접근 가능

       - 캡슐화
            :  관련된 변수와 메소드를 하나의 객체로 묶어 데이터를 보호하는 것

          * getter()	: 변수의 값을 가져오는 메소드
          * setter()	: 변수의 값을 지정하는 메소드
  
          * toString()	: Object 클래스에 정의된 메소드.
	 	   오버라이딩하여 문자열 템플릿을 리턴하면
	 	   객체 출력 시, 지정한 문자열 형식으로 출력하게 해주는 메소드

      -  static
           : "고정된" 이라는 뜻을 가지며,
              변수/메소드를 클래스가 로딩 할 때, 제일 먼저 메모리 공간에 고정하는 키워드
 	- 객체를 생성하지 않고도 사용할 수 있다.
	- 프로그램 시작 시 할당되고, 프로그램 종료 시 메모리에서 해제된다.
	- 모든 객체가 static 멤버를 공유한다.
 	- 메모리 영역 중 메소드 영역의 static 영역에 할당 된다.              

      - final
         : "마지막"
            * final 클래스	: 마지막 클래스, 상속하지 못하도록 막는 것
            * final 메소드	: 마지막 메소드, 오버라이딩 못하도록 막는 것
            * final 변수	: 마지막 변수, 상수; 값을 한 번만 초기화하고 값 변경 불가



   7. 상속
      
    	상속 ?
	: "자식이 부모로부터 무언가를 물려받는 것"

	상속
	: 부모 클래스의 변수, 메소드를 자식 클래스에서 재사용하는 것"
	* 키워드 : extends
	관계 - 부모 클래스 (Super Class) : 자식 클래스(Sub Class)

	- 클래스 타입 변환
	* 업캐스팅 (자동 타입변환)
	부모 클래스 = 자식 클래스
	
	* 다운캐스팅 (강제 타입변환)
	자식 클래스 = (자식 타입) 부모 클래스
	- 전제조건 : 업캐스팅


   8. 추상 클래스
	
	추상 ?
	: 여러 대상으로부터 공통된 특성을 추출하는 것
	
	- 추상 클래스
	: 클래스들의 공통된 특성을  추출하여 선언한 클래스

	키워드 : abstract
	* 구현 클래스에서 사용할 변수/메소드 이름을 통일
	* 구현 클래스를 작성할 시간을 절약
	* 설계자와 코더가 각각의 업무인 설계와 코드 작업을 분업화



   9. 인터페이스
	
	인터페이스 ?
	: 서로 다른 대상을 연결시켜주는 매개체
	
	- 인터페이스
	: 상수와 추상메소드를 중점으로 정의한 클래스
	
	객체의 사용방법을 요약적으로 정의한 타입
	개발 코드와 객체가 서로 통하는 접점
	- 키워드 : 정의 interface
	                  구현 implements

	- 구성요소 : 상수, 추상 메소드, 디폴트 메소드, static 메소드
	
	- 인터페이스는 다중 구현이 가능
	- 인터페이스끼리 상속 가능


  10. 중첩 클래스, 중첩 인터페이스

  	- 중첩 클래스 : 클래스 내부에 선언한 클래스
	* 바깥 클래스 : Outer Class
	* 내부 클래스 : Inner Class

	- 중첩 인터페이스 : 클래스 내부에 선언한 인터페이스


  11. 익명 객체
	
	- 익명 객체 : 이름이 없은 객체
	

	* 익명 자식 객체	: 부모클래스 객체명 = new 부모클래스( ... ) {
				// 자식 객체 정의
				
			  };

	* 익명 구현 객체	: 인터페이스 객체명 = new 인터페이스( ... ) {
				// 구현 객체 정의
			  };
		
		
  12. 예외 처리
	
	예외?
	: 프로그램 실행 과정에서 사용자나 개발자의 잘못으로 발생한 오류
	-> 복구 또는 처리 가능

	주요 예외 클래스
	- ArithmeticException
	- ClassNotFoundException
	- ArrayIndexOutofBoundsException
	- NullPointerException
	- NumberFormatException


	* 예외처리
	: 예외 발생가능성이 있는 코드를 처리 코드로 대응하는 것
	
	try {
		예외 발생가능 문장
	}
	catch ( 예외타입 변수명 ) {
		예외 처리 문장
	}
	finally {
		예외 여부와 무관하게 실행할 문장	
	}	

	- 예외 전가  - throws
	: 메소드를 호출한 곳으로 예외 처리의 책임을 떠넘기는 것


	- 예외 강제 발생 - throw new 예외(  );
	: 코드 실행 흐름에 따라, 예외를 강제발생 시키는 것

	
	- 예외 정보
	* e.getMessage()		: 예외 메시지와 이유를 출력
	* e.printStackTrace()	: 예외 발생코드를 추적하여 원인을 단계별로 출력


 
   13. 패키지
	
	- 패키지
	: 관련된 클래스 파일들을 모아놓은 폴더
	* 클래스의 경로를 알려주는 역할
	* 같은 이름의 클래스파일을 구별하는 역할

	* 종류
	- 내장 패키지		: java.~~~ 로 시작되는 자바에서 제공하는 패키지
	- 사용자 정의 패키지		: 개발자 직접 생성한 패키지


	- 패키지 사용
	import
	: 다른 패키지의 작성된 클래스를 해당 클래스에 포함시키는 키워드
	ex) import Day01.Test;
	      import java.util.List;

	- JDK 주요 패키지
	* java.lang		: 문자열, 표준 입출력 등 기본 클래스와 인터페이스
	* java.util			: 날짜, 시간, 컬렉션 등 유용한 기능을 제공하는 클래스와 인터페이스
	* java.io			: 입출력 관련 클래스와 인터페이스
	* java.sql			: JDBC 관련 클래스와 인터페이스


   14. 자바 기본 API

	* java.lang		: Object, Wrapper Class, Math, String, StringBuffer, StringBuilder
	* java.util			: StringTokenizer, Random, Arrays, Calendar, Date
	* java.time		: LocalDate, LocalDateTime, ZonedDateTime
	* java.text		: SimpleDateFormat, DecimalFormat, MessageFormat


   15. 제네릭

	- 제네릭?
	: 모든 클래스 타입을 다룰 수 있도록 타입 매개변수로 클래스/메소드를 정의하는 기법
	* 객체를 생성할 때, 타입을 결정
	class 클래스명 <T> {   T t;  ....   }


    16. 컬렉션 프레임워크
	
	- 컬렉션
	: 개수가 변하는 객체 요소의 모음
	* 요소로 참조타입만 사용가능 (기본타입 사용불가)
	* 객체 요소를 다루는 동적 자료구조
	* 요소 추가/삭제 가능
	* 요소의 개수에 따라서 크기가 자동 조절
	
	- 배열 vs 컬렉션
	   : 배열은 고정된 요소의 개수를 다루고, 
                                   요소로 기본 타입, 참조 타입 모두 다룰 수 있다.
                       컬렉션은 가변 요소의 개수를 다루고,
	                요소로 참조 타입만 다룰 수 있다.
	  	(* 기본 타입은 Wrapper Class 로 대체하여 사용)

	- 컬렉션 프레임워크
	: 데이터를 저장하는 자료구조 + 데이터를 처리하는 알고리즘
 	  자료구조와 알고리즘을 표준화된 방법으로 제공하는 클래스의 모음

	- 주요 인터페이스
	* List<E>		: 순서 있음, 요소 중복 가능	- ArrayList, LinkedList, Vector, Stack
	* Set<E>		: 순서 없음, 요소 중복 불가	- HashSet
	* Queue<E>	: 큐 자료구조를 관리		- LinkedList
	* Map<K, V>	: 키, 값을 쌍으로로 요소를 관리	- HashMap


   

 ** 이클립스 단축키

	-  파일 저장	: ctrl + S
	-  프로그램 실행	: ctrl + F11
	-  폰트 확대/축소	: ctrl +  (+/-)
	-  한 줄 삭제	: ctrl + D
	-  한 줄 복사	: ctrl + alt + (↑/↓)
		(cf. 디스플레이 설정 단축키와 충돌 되는 경우가 있음, 디스플레이 단축키 비활성화)
		 - 바탕화면 우클릭 > 그래픽 속성  > 옵션 및 지원 > 바로가기키 관리 (사용안함) 클릭
	-  스크롤 이동	: ctrl + (↑/↓)
	-  코드 이동	: alt + (↑/↓)	
	-  현재 탭 종료	: ctrl + W
	-  전체 탭 종료	: ctrl + shift + W
	-  찾기 바꾸기	: ctrl + F
	-  파일 찾기	: ctrl + shift + R
	-  코드 찾기	: ctrl + H
	-  뒤로가기		: ctrl + Z
	-  앞으로가기	: ctrl + Y
	-  잘라내기		: ctrl + X
	-  모두 선택	: ctrl + A
	-  코드 정리	: ctrl + shift + F
	-  들여쓰기		: tab
	-  내어쓰기		: shift + tab
	-  한 줄 주석	: ctrl + /  	 	또는   ctrl + shift + C
	-  여러 줄 주석	: ctrl + shift + /
	-  여러 줄 주석해제	: ctrl + shift + \
	-  새 파일 만들기	: ctrl + N
	-  이름 바꾸기	: F2
	-  전체화면		: ctrl + M
	-  단어 찾기	: ctrl + K
	-  라인 찾기	: ctrl + L
	-  한 번에 import	: ctrl + shift + O
	*  자동 완성	: ctrl + space
			 (맥북OS :  CMD + ctrl + space)
	    * 생성자 자동완성
	      - 변수로 생성자 자동완성 : alt + shift + S : O
	      - 부모로 생성자 자동완성 : alt + shift + S : C

	    * 오버라이딩 	:  alt + shift + S : V
	    * getter/setter 	:  alt + shift + S : R
	    * toString()	:  alt + shift + S : S


		